const express = require('express');
const SocketServer = require('ws').Server;

//importing uuid which generates a unique id, which cannot ever be duplicated.
const uuidv4 = require('uuid/v4');

const PORT = 3001;

//creating a new express server.
const server = express()
//express server serving static assets from the public folder.
  .use(express.static('public'))
  .listen(PORT, '0.0.0.0', 'localhost', () => console.log(`Listening on port ${ PORT }`));


//creating websocket server
const wss = new SocketServer({server});

let outgoingData = [];
let stringNumber = '';


// Set up a callback that will run when a client connects to the server
// When a client connects they are assigned a socket, represented by
// the ws parameter in the callback.
wss.on('connection', (connection) => {
  console.log('Client Connected');
  // console.log((wss.clients).size);
  // stringNumber = ((wss.clients).size).toString();

  outgoingData = [{
    content:(wss.clients).size,
    type:'incomingUserData'
  }]

  wss.clients.forEach(function each(client) {
    client.send(JSON.stringify(outgoingData),() => {
      console.log('message sent to client');
    });
  })

//recieving message from client side.
  connection.on('message', ((message) => {

    const clientMessage = JSON.parse(message);
    if(clientMessage[0].type === 'postMessage'){
      console.log(clientMessage);
      console.log(uuidv4());

      //setting new message to send to clients, given new ID using UUID and type is changed.
      outgoingData = [{
        content:clientMessage[0].content,
        username:clientMessage[0].username,
        id: uuidv4(),
        type:'incomingMessage'
      }]
      console.log('test', outgoingData);

      //websockets keeps track of clients connected automatically, sending message to all.
      //why not work if outside?
      wss.clients.forEach(function each(client) {
        client.send(JSON.stringify(outgoingData),() => {
          console.log('message sent to client');
        });
      })
    } else if(clientMessage[0].type === 'postNotification'){
        outgoingData = [{
          content:clientMessage[0].content,
          username:'NOTIFICATION',
          id: uuidv4(),
          type:'incomingNotification'
        }]

        console.log('test', outgoingData);
        wss.clients.forEach(function each(client) {
          client.send(JSON.stringify(outgoingData),() => {
            console.log('message sent to client');
          });
        })
    }



  }));



  connection.on('close', () => console.log('Client Disconnected'));
});